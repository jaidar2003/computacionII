#!/usr/bin/env python3
"""
Script para migrar los permisos de usuarios de 'lectura' y 'escritura' a 'usuario'.

Este script actualiza la base de datos para cambiar el sistema de permisos
de tres niveles (lectura, escritura, admin) a dos niveles (usuario, admin).
"""

import os
import sys
import sqlite3
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# A√±adir el directorio ra√≠z al path para importar m√≥dulos del proyecto
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Importar la funci√≥n para obtener conexi√≥n a la base de datos
from baseDeDatos.db import obtener_conexion

def migrar_permisos():
    """
    Migra los permisos de 'lectura' y 'escritura' a 'usuario'.
    """
    try:
        # Obtener conexi√≥n a la base de datos
        conn = obtener_conexion()
        cursor = conn.cursor()
        
        # Contar usuarios antes de la migraci√≥n
        cursor.execute("SELECT permisos, COUNT(*) FROM usuarios GROUP BY permisos")
        conteo_antes = cursor.fetchall()
        
        logger.info("Estado de permisos antes de la migraci√≥n:")
        for permiso, cantidad in conteo_antes:
            logger.info(f"  - {permiso}: {cantidad} usuarios")
        
        # Actualizar permisos de 'lectura' a 'usuario'
        cursor.execute("UPDATE usuarios SET permisos = 'usuario' WHERE permisos = 'lectura'")
        lectura_actualizados = cursor.rowcount
        logger.info(f"Actualizados {lectura_actualizados} usuarios de 'lectura' a 'usuario'")
        
        # Actualizar permisos de 'escritura' a 'usuario'
        cursor.execute("UPDATE usuarios SET permisos = 'usuario' WHERE permisos = 'escritura'")
        escritura_actualizados = cursor.rowcount
        logger.info(f"Actualizados {escritura_actualizados} usuarios de 'escritura' a 'usuario'")
        
        # Contar usuarios despu√©s de la migraci√≥n
        cursor.execute("SELECT permisos, COUNT(*) FROM usuarios GROUP BY permisos")
        conteo_despues = cursor.fetchall()
        
        logger.info("Estado de permisos despu√©s de la migraci√≥n:")
        for permiso, cantidad in conteo_despues:
            logger.info(f"  - {permiso}: {cantidad} usuarios")
        
        # Guardar cambios
        conn.commit()
        
        # Registrar la migraci√≥n en el log de eventos
        cursor.execute("""
            INSERT INTO log_eventos (usuario, ip, accion, mensaje, fecha)
            VALUES (?, ?, ?, ?, ?)
        """, (
            "sistema", 
            "localhost", 
            "MIGRACION", 
            f"Migraci√≥n de permisos: {lectura_actualizados} usuarios de 'lectura' y {escritura_actualizados} usuarios de 'escritura' actualizados a 'usuario'",
            datetime.now()
        ))
        
        conn.commit()
        conn.close()
        
        logger.info("‚úÖ Migraci√≥n de permisos completada con √©xito")
        return True
        
    except Exception as error:
        logger.error(f"‚ùå Error durante la migraci√≥n de permisos: {error}")
        if 'conn' in locals() and conn:
            conn.rollback()
            conn.close()
        return False

if __name__ == "__main__":
    print("üîÑ Iniciando migraci√≥n de permisos...")
    resultado = migrar_permisos()
    
    if resultado:
        print("‚úÖ Migraci√≥n completada con √©xito")
        sys.exit(0)
    else:
        print("‚ùå Error durante la migraci√≥n")
        sys.exit(1)