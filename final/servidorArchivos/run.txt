
INSTRUCCIONES DE INICIO
=====================

⚠️ IMPORTANTE: Para que el sistema funcione correctamente, es necesario ejecutar TRES componentes:
1. El servidor principal (gestiona archivos y conexiones)
2. La API Flask (interfaz para el frontend)
3. El worker de Celery (procesa verificaciones en segundo plano)

Si no se ejecuta el worker de Celery, las verificaciones de archivos no funcionarán correctamente.

MacOS
=====

# 1. Iniciar el servidor de archivos (en una terminal)
python /Users/juanmaaidar/PycharmProjects/computacionII/final/servidorArchivos/main.py -m server

# 2. Iniciar la API Flask (en otra terminal)
python /Users/juanmaaidar/PycharmProjects/computacionII/final/servidorArchivos/main.py -m api -H 192.168.100.191 -p 5005

# 3. Iniciar el worker de Celery (en otra terminal) - OBLIGATORIO para verificaciones
cd /Users/juanmaaidar/PycharmProjects/computacionII/final/servidorArchivos
celery -A tareas.celery worker --loglevel=info

# 4. Iniciar el frontend (en otra terminal)
cd /Users/juanmaaidar/PycharmProjects/computacionII/final/servidorArchivos/front
# Editar el archivo .env para configurar VITE_API_URL si la API está en otra máquina
npm run dev

Linux
=====

# 1. Iniciar el servidor de archivos (en una terminal)
python /home/juanma/PycharmProjects/computacionII/final/servidorArchivos/main.py -m server

# 2. Iniciar la API Flask (en otra terminal)
python /home/juanma/PycharmProjects/computacionII/final/servidorArchivos/main.py -m api -H 192.168.100.191 -p 5005

# 3. Iniciar el worker de Celery (en otra terminal) - OBLIGATORIO para verificaciones
cd /home/juanma/PycharmProjects/computacionII/final/servidorArchivos
celery -A tareas.celery worker --loglevel=info

# 4. Iniciar el frontend (en otra terminal)
cd /home/juanma/PycharmProjects/computacionII/final/servidorArchivos/front
# Editar el archivo .env para configurar VITE_API_URL si la API está en otra máquina
npm run dev

USANDO EL CLI INTUITIVO
====================

⚠️ IMPORTANTE: Antes de usar el CLI, asegúrate de que el servidor esté en ejecución.
A diferencia del frontend, el CLI se comunica directamente con el servidor mediante sockets SSL,
sin utilizar la API Flask como intermediario.

Paso 1: Instalar dependencias
----------------------------
# Instala las dependencias necesarias para el CLI intuitivo
pip install colorama tqdm

Paso 2: Configuración del CLI
-----------------------------
# Asegúrate de que la configuración del servidor en el archivo de configuración sea correcta
# Por defecto es SERVER_HOST = "127.0.0.1" y SERVER_PORT = 1608
# Si el servidor se ejecuta en otra dirección o puerto, edita el archivo:
nano /Users/juanmaaidar/PycharmProjects/computacionII/cli/utils/config.py

Paso 3: Hacer ejecutables los CLIs (solo la primera vez)
----------------------------------------------------
chmod +x /Users/juanmaaidar/PycharmProjects/computacionII/cli/cli.py
chmod +x /Users/juanmaaidar/PycharmProjects/computacionII/cli/menu_cli.py

Paso 4: Uso del CLI con menú numerado (más intuitivo)
---------------------------------------------------
# Desde el directorio raíz del proyecto, inicia el CLI con menú numerado:
./cli/menu_cli.py

# Este modo presenta un menú principal con opciones numeradas:
# 1. Iniciar sesión
# 2. Registrarse
# 3. Salir

# Una vez iniciada la sesión, aparecen más opciones:
# 4. Listar archivos
# 5. Subir archivo
# 6. Descargar archivo
# 7. Eliminar archivo
# 8. Renombrar archivo
# 9. Verificar archivo
# 10. Cerrar sesión

# Los usuarios administradores tienen opciones adicionales:
# 11. Listar usuarios
# 12. Ver solicitudes de permisos
# 13. Aprobar/rechazar solicitud

# Mientras que los usuarios normales ven:
# 11. Solicitar permisos de administrador
# 12. Ver mis solicitudes de permisos

Paso 5: Uso del CLI en modo interactivo (para usuarios avanzados)
---------------------------------------------------
# Desde el directorio raíz del proyecto, inicia el modo interactivo:
./cli/cli.py --interactive

# O usa el alias más corto:
./cli/cli.py -i

# O usa el comando shell:
./cli/cli.py shell

# Una vez en el modo interactivo, puedes usar comandos como:
# - help                         # Ver ayuda
# - login usuario contraseña     # Iniciar sesión
# - list                         # Listar archivos
# - upload /ruta/archivo.txt     # Subir archivo (con autocompletado)
# - download archivo.txt         # Descargar archivo (con autocompletado)
# - status                       # Ver estado de la sesión
# - exit                         # Salir

# El modo interactivo ofrece:
# - Historial de comandos (flechas arriba/abajo)
# - Autocompletado (tecla Tab)
# - Prompt personalizado con usuario y rol
# - Colores y formato mejorado
# - Barras de progreso para subidas y descargas

Paso 5: Uso del CLI en modo tradicional
--------------------------------------
# También puedes usar el CLI en modo tradicional:

# Autenticación
./cli/cli.py login nombre_usuario contraseña
./cli/cli.py register nuevo_usuario contraseña
./cli/cli.py logout

# Gestión de archivos
./cli/cli.py list                                # o ls
./cli/cli.py upload /ruta/al/archivo.txt
./cli/cli.py download nombre_archivo.txt
./cli/cli.py delete nombre_archivo.txt           # o rm
./cli/cli.py rename nombre_viejo.txt nombre_nuevo.txt
./cli/cli.py verify nombre_archivo.txt           # o verify (sin argumentos para todos)

# Gestión de permisos
./cli/cli.py request-permission admin            # o request
./cli/cli.py view-requests                       # o requests
./cli/cli.py approve ID_SOLICITUD aprobar
./cli/cli.py list-users                          # o users

# Utilidades
./cli/cli.py status                              # Estado de la sesión
./cli/cli.py --help                              # Ver ayuda

# Para más información, consulta la documentación completa en:
# /Users/juanmaaidar/PycharmProjects/computacionII/cli/README.md
