"""
M√≥dulo de seguridad SSL para el cliente.

Este m√≥dulo contiene las funciones relacionadas con la seguridad SSL,
incluyendo la verificaci√≥n de certificados y el establecimiento de conexiones seguras.
"""

import os
import sys
import ssl
import socket
import datetime
import logging

# Configuraci√≥n b√°sica
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))
logger = logging.getLogger(__name__)

# Importaciones de m√≥dulos propios
from cli.estilos import ANSI_VERDE, ANSI_RESET, ANSI_ROJO, ANSI_AMARILLO

# Constantes
DIAS_AVISO_EXPIRACION = 30  # D√≠as antes de expiraci√≥n para mostrar advertencia

def verificar_certificado_servidor():
    """
    Verifica validez y expiraci√≥n del certificado del servidor.
    
    Returns:
        tuple: (es_valido, mensaje)
    """
    cert_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 
                           "certificados", "certificado.pem")

    if not os.path.exists(cert_path):
        return False, f"No se encontr√≥ el certificado del servidor en {cert_path}"

    try:
        # Leer el contenido del certificado
        with open(cert_path, 'r') as f:
            cert_data = f.read()

        # Crear un contexto SSL temporal para analizar el certificado
        context = ssl.create_default_context()
        context.load_verify_locations(cadata=cert_data)

        # Obtener informaci√≥n del certificado
        cert = ssl._ssl._test_decode_cert(cert_path)

        # Extraer fecha de expiraci√≥n
        not_after = cert.get('notAfter', '')
        if not not_after:
            return False, "No se pudo determinar la fecha de expiraci√≥n del certificado"

        # Formato de fecha en certificados: 'May 30 00:00:00 2023 GMT'
        try:
            expiracion = datetime.datetime.strptime(not_after, '%b %d %H:%M:%S %Y %Z')
            hoy = datetime.datetime.now()

            # Verificar si ya expir√≥
            if hoy > expiracion:
                return False, f"El certificado del servidor ha expirado el {not_after}"

            # Verificar si est√° por expirar
            dias_restantes = (expiracion - hoy).days
            if dias_restantes <= DIAS_AVISO_EXPIRACION:
                return True, f"El certificado del servidor expirar√° en {dias_restantes} d√≠as ({not_after})"

            # Certificado v√°lido
            return True, f"Certificado del servidor v√°lido hasta {not_after}"

        except ValueError as e:
            return False, f"Error al analizar la fecha de expiraci√≥n del certificado: {e}"

    except Exception as e:
        return False, f"Error al verificar el certificado del servidor: {e}"

def establecer_conexion_ssl(host, port, verificar_cert=True):
    """
    Establece conexi√≥n SSL con el servidor, opcionalmente verificando su certificado.
    
    Args:
        host (str): Direcci√≥n del servidor
        port (int): Puerto del servidor
        verificar_cert (bool): Indica si se debe verificar el certificado del servidor
        
    Returns:
        socket: Socket SSL conectado o None si hay error
    """
    # Configurar contexto SSL con verificaci√≥n de certificado
    contexto = ssl.create_default_context()

    # Configurar verificaci√≥n seg√∫n el par√°metro
    if verificar_cert:
        # Habilitar verificaci√≥n de certificado
        contexto.verify_mode = ssl.CERT_REQUIRED

        # Habilitar verificaci√≥n de hostname si estamos usando un nombre de dominio
        if not host.replace('.', '').isdigit():  # Si no es una IP
            contexto.check_hostname = True
        else:
            contexto.check_hostname = False

        # Cargar el certificado del servidor como certificado de confianza
        cert_path = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 
                               "certificados", "certificado.pem")

        if os.path.exists(cert_path):
            contexto.load_verify_locations(cafile=cert_path)
            print(f"{ANSI_VERDE}‚úÖ Certificado del servidor cargado correctamente.{ANSI_RESET}")
        else:
            print(f"{ANSI_AMARILLO}‚ö†Ô∏è No se encontr√≥ el certificado del servidor en {cert_path}{ANSI_RESET}")
            print(f"{ANSI_AMARILLO}‚ö†Ô∏è La conexi√≥n no ser√° segura sin verificaci√≥n de certificado.{ANSI_RESET}")
            # Fallback a modo sin verificaci√≥n si no encontramos el certificado
            contexto.check_hostname = False
            contexto.verify_mode = ssl.CERT_NONE
    else:
        # Deshabilitar verificaci√≥n de certificado si el usuario eligi√≥ continuar sin verificar
        print(f"{ANSI_AMARILLO}‚ö†Ô∏è Verificaci√≥n de certificado deshabilitada por el usuario.{ANSI_RESET}")
        print(f"{ANSI_AMARILLO}‚ö†Ô∏è La conexi√≥n no ser√° segura.{ANSI_RESET}")
        contexto.check_hostname = False
        contexto.verify_mode = ssl.CERT_NONE

    try:
        # Establecer conexi√≥n
        sock = socket.create_connection((host, port))
        # Configurar timeout para operaciones de socket (120 segundos)
        sock.settimeout(120)
        conexion_ssl = contexto.wrap_socket(sock, server_hostname=host)

        # Verificar y mostrar informaci√≥n del certificado
        cert = conexion_ssl.getpeercert()
        if cert:
            subject = dict(x[0] for x in cert['subject'])
            issuer = dict(x[0] for x in cert['issuer'])
            print(f"üîí Conectado a servidor con certificado:")
            print(f"   - Emitido para: {subject.get('commonName', 'Desconocido')}")
            print(f"   - Emitido por: {issuer.get('commonName', 'Desconocido')}")
            print(f"   - V√°lido hasta: {cert.get('notAfter', 'Desconocido')}")

        logger.debug(f"üîå Conexi√≥n segura establecida con {host}:{port}")
        return conexion_ssl

    except ssl.SSLError as e:
        print(f"{ANSI_ROJO}‚ùå Error de verificaci√≥n SSL: {e}{ANSI_RESET}")
        print(f"{ANSI_ROJO}‚ùå No se pudo verificar la identidad del servidor.{ANSI_RESET}")
        print(f"{ANSI_ROJO}‚ùå Esto podr√≠a indicar un intento de ataque 'man-in-the-middle'.{ANSI_RESET}")
        return None
    except Exception as e:
        print(f"{ANSI_ROJO}‚ùå Error al establecer conexi√≥n: {e}{ANSI_RESET}")
        return None